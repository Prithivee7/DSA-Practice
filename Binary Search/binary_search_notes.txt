int(8.99999) -> 8
8//3 -> 2
So these functions only take the complete number and leave out the decimal

####################################################################################################
low = 0
When high is an even number
int((low+high)/2) == low + int((high-low)/2) == low + int((high-low+1)/2)

When high is an odd number
int((low+high)/2) == low + int((high-low)/2)
Whereas low + int((high-low+1)/2) is one more than int((low+high)/2) and low + int((high-low)/2)

#####################################################################################################
Refer to the below article for variations
https://leetcode.com/discuss/interview-question/1322500/5-variations-of-Binary-search-(A-Self-Note)

######################################################################################################

Initial length -> N
First iteration -> N/2 -> N/2^1
Second iteration -> N/4 -> N/2^2
kth iteration -> N/2^k

Since the final length of the array is 1 -> N/2^k = 1
N = 2^k
Taking log on both sides
logN = k

For 10 million numbers linear search does 10 million comparisons Whereas
binary search does c * log(10 million) -> c * 7 -> If we have a value of c as 3.
Then it would take just 21 comparisons.
In other words binary search is faster than linear search by c * N /logN times.





